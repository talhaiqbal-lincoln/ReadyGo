using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using ReadyGo.Domain.Constants;
using ReadyGo.Domain.Entities;
using ReadyGo.Domain.Entities.ApiModels;
using ReadyGo.Domain.Enum;
using ReadyGo.Service.Repositories.Interfaces;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.Collections.Generic;

namespace ReadyGo.Web.Controllers.API.ClientApi
{
    [ApiController]
    [ApiVersion("2.0")]
    [ApiExplorerSettings(GroupName = "client")]
    [Route("api/v{version:apiVersion}/Routes/")]
    [SwaggerTag("Create, Read, Update and Delete Routes based on Route Id Or AxCode")]
    public class RoutesApiController : BaseApiController
    {
        private readonly IMapper _mapper;
        private readonly ILogger<RoutesApiController> _logger;
        private readonly IGenericRepository<Route> _routesRepo;

        public RoutesApiController(IGenericRepository<Route> routesRepo, IMapper mapper, ILogger<RoutesApiController> logger)
        {
            _mapper = mapper;
            _logger = logger;
            _routesRepo = routesRepo;
        }

        /// <summary>
        /// Get all the Registered routes
        /// </summary>
        /// <remarks>
        /// Will return a list of all the valid registered routes
        /// </remarks>
        [HttpGet]
        [Route("GetRoutes")]
        [Produces("application/json", "application/xml")]
        public IActionResult GetAll()
        {
            try
            {
                var routes = _routesRepo.FindAll(x => x.DeletedAt == null);

                return Ok(new { Status = ApiStatus.Success.ToString(), Message = SuccessMessageConstants.DefaultSuccess, Routes = routes });
            }
            catch (Exception ex)
            {
                return BadRequest(new { Status = ApiStatus.Error.ToString(), Message = ErrorMessageConstants.Error });
            }
        }

        /// <summary>
        /// Get a particular registered route based on Route-Id.
        /// </summary>
        /// <param name="id" example="c7be1d28-2b81-42e9-90e9-5396492a90e0">Registered Route Id</param>
        /// <remarks>
        /// Will return a valid registered route in case if it matches the Route ID.
        /// </remarks>
        [HttpGet("GetRouteById/{id}")]
        public IActionResult Get(Guid id)
        {
            try
            {
                var route = _routesRepo.FindBy(x => x.DeletedAt == null && x.Id == id);
                if (route == null)
                    return BadRequest(new { Status = ApiStatus.Error.ToString(), Message = string.Format(ErrorMessageConstants.NotFound, "Route") });

                return Ok(new { Status = ApiStatus.Success.ToString(), Message = SuccessMessageConstants.DefaultSuccess, Route = route });
            }
            catch (Exception ex)
            {
                return BadRequest(new { Status = ApiStatus.Error.ToString(), Message = ErrorMessageConstants.Error });
            }
        }

        /// <summary>
        /// Get a particular registered route based on Route AxCode.
        /// </summary>
        /// <param name="code" example="AX-CODE123">AutoGenerated Route Ax Code</param>
        /// <remarks>
        /// Will return a valid registered route in case if it matches the Route Ax Code.
        /// </remarks>
        /// <response code="200">Route found against RxCode provided.</response>
        /// <response code="400">Route not found against RxCode provided.</response>
        [HttpGet("GetRouteByAx/{code}")]
        public IActionResult GetByAx(string code)
        {
            try
            {
                var route = _routesRepo.FindBy(x => x.DeletedAt == null && x.AxCode == code);
                if (route == null)
                    return BadRequest(new { Status = ApiStatus.Error.ToString(), Message = string.Format(ErrorMessageConstants.NotFound, "Route") });

                return Ok(new { Status = ApiStatus.Success.ToString(), Message = SuccessMessageConstants.DefaultSuccess, Route = route });
            }
            catch (Exception ex)
            {
                return BadRequest(new { Status = ApiStatus.Error.ToString(), Message = ErrorMessageConstants.Error });
            }
        }

        /// <summary>
        /// Add a new route.
        /// </summary>
        /// <param name="routeViewModel"></param>
        /// <response code="200">If new route added successfully</response>
        /// <response code="400">If route already exist with same name</response>
        [HttpPost]
        [Route("InsertRoute")]
        public IActionResult Post([FromBody] RouteApiViewModel routeViewModel)
        {
            try
            {
                if (!ModelState.IsValid)
                    throw new Exception();

                if (_routesRepo.FindBy(x => x.Name.ToLower() == routeViewModel.Name.ToLower() && x.DeletedAt == null) != null)
                    return BadRequest(new { Status = ApiStatus.Error.ToString(), Message = string.Format(ErrorMessageConstants.AlreadyExists, "Route") });

                var route = _mapper.Map<Route>(routeViewModel);

                route.IsActive = true;
                route.SyncedAt = DateTime.Now;

                _routesRepo.Insert(route);

                return Ok(new { Status = ApiStatus.Success.ToString(), Message = SuccessMessageConstants.CreateSuccess, Route = route.Name });
            }
            catch (Exception ex)
            {
                return BadRequest(new { Status = ApiStatus.Error.ToString(), Message = ErrorMessageConstants.Error });
            }
        }

        /// <summary>
        /// Insert multiple routes
        /// </summary>
        [HttpPost]
        [Route("InsertMultipleRoutes")]
        [ProducesResponseType(typeof(RouteApiViewModel), 200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        [Produces("application/json", "application/xml")]
        public IActionResult InsertMultipleRoutes([FromBody] IEnumerable<RouteApiViewModel> routes)
        {
            try
            {
                if (!ModelState.IsValid)
                    throw new Exception();

                List<object> responseMessages = new List<object>();
                var count = 0;
                foreach (var route in routes)
                {
                    count++;
                    var existingRoute = _routesRepo.FindBy(x => (x.Name.ToLower() == route.Name.ToLower()) && x.DeletedAt == null);
                    if (existingRoute != null)
                    {
                        responseMessages.Add(new { RecordNumber = count, Status = ApiStatus.Error.ToString(), Message = string.Format(ErrorMessageConstants.AlreadyExists, "Route") });
                        continue;
                    }

                    var newRoute = _mapper.Map<Route>(route);

                    newRoute.SyncedAt = DateTime.Now;

                    if (_routesRepo.Insert(newRoute))
                    {
                        responseMessages.Add(new { RecordNumber = count, Status = ApiStatus.Success, Message = string.Format(SuccessMessageConstants.CreateSuccess, route.Name) });
                        continue;
                    }
                    else
                    {
                        responseMessages.Add(new { RecordNumber = count, Status = ApiStatus.Error.ToString(), Message = string.Format(ErrorMessageConstants.AlreadyExists, "Route") });
                        continue;
                    }
                }
                return Ok(responseMessages);
            }
            catch (Exception ex)
            {
                return BadRequest(new { Status = ApiStatus.Error.ToString(), Message = ErrorMessageConstants.Error });
            }
        }

        /// <summary>
        /// Update a route.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="routeViewModel"></param>
        /// <returns> Message based on valid updated route</returns>
        /// <response code="200">If route updated successfully</response>
        /// <response code="400">If route already exist with same name</response>
        [HttpPut("UpdateRoute/{id}")]
        public IActionResult Put(Guid id, [FromBody] RouteApiViewModel routeViewModel)
        {
            try
            {
                if (!ModelState.IsValid)
                    throw new Exception();

                var route = _routesRepo.FindBy(x => (x.Id == id) && x.DeletedAt == null);
                if (route == null)
                    return BadRequest(new { Status = ApiStatus.Error.ToString(), Message = string.Format(ErrorMessageConstants.NotFound, "Route") });

                if (_routesRepo.FindBy(x => x.Name.ToLower() == routeViewModel.Name.ToLower() && x.DeletedAt == null) != null)
                    return BadRequest(new { Status = ApiStatus.Error.ToString(), Message = string.Format(ErrorMessageConstants.AlreadyExists, "Route") });

                route.Name = routeViewModel.Name;
                route.AxCode = routeViewModel.AxCode;
                route.Description = routeViewModel.Description;
                route.SyncedAt = DateTime.Now;

                _routesRepo.Update(route);
                return Ok(new { Status = ApiStatus.Success.ToString(), Message = SuccessMessageConstants.UpdateSuccess, Route = route.Name });
            }
            catch (Exception ex)
            {
                return BadRequest(new { Status = ApiStatus.Error.ToString(), Message = ErrorMessageConstants.Error });
            }
        }

        /// <summary>
        /// Delete a route.
        /// </summary>
        /// <returns> Message based on deleted route</returns>
        /// <response code="200">If route deleted successfully</response>
        /// <response code="400">If route not found against id provided.</response>
        [HttpDelete("DeleteRouteById/{id}")]
        public IActionResult Delete(Guid id)
        {
            try
            {
                var route = _routesRepo.FindBy(x => x.DeletedAt == null && x.Id == id);
                if (route == null)
                    return BadRequest(new { Status = ApiStatus.Error.ToString(), Message = string.Format(ErrorMessageConstants.NotFound, "Route") });

                route.DeletedAt = DateTime.Now;
                _routesRepo.Update(route);

                return Ok(new { Status = ApiStatus.Success.ToString(), Message = SuccessMessageConstants.DeleteSuccess, Route = route.Name });
            }
            catch (Exception ex)
            {
                return BadRequest(new { Status = ApiStatus.Error.ToString(), Message = ErrorMessageConstants.Error });
            }
        }

        /// <summary>
        ///   Delete a route.
        /// </summary>
        /// <returns> Message based on deleted route</returns>
        /// <response code="200">If route deleted successfully</response>
        /// <response code="400">If route not found against code provided.</response>
        [HttpDelete("DeleteRouteByAxCode/{code}")]
        public IActionResult DeleteByAxCode(string code)
        {
            try
            {
                var route = _routesRepo.FindBy(x => x.DeletedAt == null && x.AxCode == code);
                if (route == null)
                    return BadRequest(new { Status = ApiStatus.Error.ToString(), Message = string.Format(ErrorMessageConstants.NotFound, "Route") });

                route.DeletedAt = DateTime.Now;
                _routesRepo.Update(route);

                return Ok(new { Status = ApiStatus.Success.ToString(), Message = SuccessMessageConstants.DeleteSuccess, Route = route.Name });
            }
            catch (Exception ex)
            {
                return BadRequest(new { Status = ApiStatus.Error.ToString(), Message = ErrorMessageConstants.Error });
            }
        }
    }
}
